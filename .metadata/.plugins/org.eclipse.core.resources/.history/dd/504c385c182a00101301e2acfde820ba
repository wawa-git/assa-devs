package com.assaassosiates.syraway.security.access.vote;

import java.util.Collection;
import java.util.HashSet;

import org.springframework.context.ApplicationContext;
import org.springframework.security.access.AccessDecisionVoter;
import org.springframework.security.access.ConfigAttribute;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.web.FilterInvocation;

import com.assaassociates.syraway.model.Page;
import com.assaassociates.syraway.model.PageRole;
import com.assaassosiates.syraway.security.SywApplicationContext;
import com.assaassosiates.syraway.security.authentication.UserProfile;

public class SywRoleVoter implements AccessDecisionVoter {

	public boolean supports(ConfigAttribute attribute) {
		// TODO Auto-generated method stub
		return true;
	}

	public boolean supports(Class<?> clazz) {
		// TODO Auto-generated method stub
		return true;
	}

	public int vote(Authentication authentication, Object object,
			Collection<ConfigAttribute> attributes) {
		int result = ACCESS_ABSTAIN;
//        Collection<GrantedAuthority> authorities = authentication.getAuthorities();
		if(object instanceof FilterInvocation){
			ApplicationContext ctx = SywApplicationContext.getCtx();
			UserProfile profile = ctx.getBean("userProfile", UserProfile.class);
            if(ctx != null && profile!=null){
            	String requstUrl = ((FilterInvocation) object).getRequestUrl();
    			String pageName = requstUrl.substring(requstUrl.lastIndexOf("/"));
    			Collection<String> oList = getAuthoritiesForPage(pageName);
    			result = ACCESS_DENIED;
    			for (String authority : oList) {
    				if (profile.isAuthorized(authority)) {
                    	System.out.println("========================== ATTRIBUT : " + authority);
                        result = ACCESS_GRANTED;
                    }
    			}
            }
		}
            
        ApplicationContext ctx = SywApplicationContext.getCtx();
        if(ctx != null){
        	UserProfile profile = ctx.getBean("userProfile", UserProfile.class);
        	System.out.println("");
        	System.out.println("============================================== The user is transient ? " + profile.isTransient());
        	System.out.println("");
        }else{
        	System.err.println("============== Pas de context");
        }
        return result;
    }
	
	private Page getPageFromName(String pPageName){
		Page result = null;
		
		
		return result;
	}
	
	private Collection<String> getAuthoritiesForPage(String pPageName){
		Collection<String> result = new HashSet<String>();
		Page oPage = getPageFromName(pPageName);
		Collection<PageRole> oPageRoles = oPage.getSwPages();
		for (PageRole oPageRole : oPageRoles) {
			result.add(oPageRole.getName());
		}
		return result;
	}
}
